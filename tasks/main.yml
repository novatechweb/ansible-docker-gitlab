---
# file: roles/docker-gitlab/tasks/main.yaml

- name: Check preconditions
  assert:
    that:
    - gitlab_db_password is defined

- name: docker_container.conf dir
  file:
    state: directory
    path: '{{ docker_restore_config_base_dir }}/{{ gitlab_dv_name }}'
    owner: root
    group: root
    mode: 'u=rwx,g=rx,o=rx'
    recurse: no

# *****************************************************************************
# backup script part

- name: Assemble dir for backup scripts
  file:
    path: /usr/libexec/bacula/backup-scripts
    state: directory

- name: before_backup script part
  template:
    src: before_backup.j2
    dest: /usr/libexec/bacula/backup-scripts/55.before_backup.gitlab

- name: after_backup script part
  template:
    src: after_backup.j2
    dest: /usr/libexec/bacula/backup-scripts/55.after_backup.gitlab

# *****************************************************************************
# update the Docker restore config

# contains the database username and password
- name: make config.sh
  template:
    src: config.sh.j2
    dest: '{{ docker_restore_config_base_dir }}/{{ gitlab_dv_name }}/config.sh'
    backup: yes
    owner: root
    group: tape
    mode: 'u=rw,g=r,o='

- name: exists - state file
  stat:
    path: '{{ docker_restore_config_base_dir }}/{{ gitlab_dv_name }}/restore.date.txt'
    get_checksum: False
    get_md5: False
  register: st_gitlab_restore

# *****************************************************************************
# Update or make the image.

- name: Checkout image repo
  git:
    repo: '{{ gitlab_image_repo }}'
    version: master
    dest: '{{ docker_projects_dir }}/docker-gitlab'
    key_file: '/home/ansibleremote/.ssh/id_rsa'

- name: copy env-file
  command: 'cp --verbose --update --backup=numbered {{ docker_projects_dir }}/docker-gitlab/gitlab.env.list {{ docker_restore_config_base_dir }}/{{ gitlab_dv_name }}'

- name: copy script
  command: 'cp --verbose --update --backup=numbered {{ docker_projects_dir }}/docker-gitlab/gitlab.sh {{ docker_restore_config_base_dir }}/{{ gitlab_dv_name }}'

- name: build image
  docker_build:
    image_name: '{{ gitlab_image_name }}'
    image_tag: '{{ docker_image_tag }}'
    dockerfile_dir: '{{ docker_projects_dir }}/docker-gitlab'

# Data volume image is now the same as the container image
#- name: build image
#  docker_build:
#    image_name: '{{ gitlab_dv_image_name }}'
#    image_tag: '{{ docker_image_tag }}'
#    dockerfile_dir: '{{ docker_projects_dir }}/docker-gitlab'

# *****************************************************************************
# Create the data volumes

- name: data-volume container (gitlab)
  docker_datavolume:
    image_name: '{{ gitlab_dv_image_name }}'
    image_tag: '{{ docker_image_tag }}'
    data_volume_container_name: '{{ gitlab_dv_name }}'

- name: data-volume container (postgres)
  docker_datavolume:
    image_name: '{{ gitlab_db_image_name }}'
    image_tag: '{{ docker_image_tag }}'
    data_volume_container_name: '{{ gitlab_db_dv_name }}'

- name: stop prev container (postgres)
  docker_container:
    image: '{{ gitlab_db_image_name }}'
    name: '{{ gitlab_db_container_name }}'
    state: stopped

- name: initial populate (postgres)
  docker_db_init:
    image_name: '{{ gitlab_db_image_name }}'
    image_tag: '{{ docker_image_tag }}'
    container_name: '{{ gitlab_db_dv_name }}_init_db'
    data_volume_container_name: '{{ gitlab_db_dv_name }}'
    data_volume_dir: '{{ docker_projects_dir }}/docker-gitlab/postgres/'
    database_name: gitlabhq_production
    database_user: '{{ gitlab_db_user }}'
    database_password: '{{ gitlab_db_password | quote }}'

# *****************************************************************************
# Start the data container running

- name: start container (redis)
  docker_container:
    detach: true
    image: '{{ redis_image_name }}:{{ docker_image_tag }}'
    name: '{{ gitlab_redis_container_name }}'
    restart_policy: '{{ docker_restart_policy }}'

- name: start container (postgres)
  docker_container:
    detach: true
    image: '{{ gitlab_db_image_name }}:{{ docker_image_tag }}'
    name: '{{ gitlab_db_container_name }}'
    restart_policy: '{{ docker_restart_policy }}'
    volumes_from: '{{ gitlab_db_dv_name }}'

- name: start container (gitlab)
  docker_container:
    detach: true
    env:
      - GITLAB_HOST={{ container_addr_map.git.hostname }}
      - GITLAB_SSH_HOST={{ container_addr_map.git.hostname }}
      - DB_USER={{ gitlab_db_user }}
      - DB_PASS={{ gitlab_db_password | quote }}
      - SMTP_HOST={{ container_addr_map.exim4.hostname }}
      - SMTP_PASS={{ gitlab_email_password | quote }}
      - LDAP_PASS={{ ldap_proxyagent_password | quote }}
      - GITLAB_ROOT_PASSWORD={{ gitlab_root_password | quote }}
      - GITLAB_SECRETS_DB_KEY_BASE={{ gitlab_secrets_db_key_base | quote }}
    env-file: '{{ docker_projects_dir }}/docker-gitlab/gitlab.env.list'
    hostname: '{{ container_addr_map.git.hostname }}'
    image: '{{ gitlab_image_name }}:{{ docker_image_tag }}'
    link:
      - '{{ openldap_container_name }}:gitlab-ldap'
      - '{{ gitlab_redis_container_name }}:gitlab-redis'
      - '{{ gitlab_db_container_name }}:gitlab-db'
      - '{{ exim4_container_name }}:{{ container_addr_map.exim4.hostname }}'
    name: '{{ gitlab_container_name }}'
    ports: '{{ container_port_map.git.port_args }}'
    restart_policy: '{{ docker_restart_policy }}'
    volumes_from:
      - '{{ openssl_dv_name }}'
      - '{{ gitlab_dv_name }}'

- name: Wait for gitlab to be fully running
  wait_for:
    delay: 10
    host: '{{ container_addr_map.git.ip_addr }}'
    port: 22
    state: started
    timeout: 180

# *****************************************************************************
# restore?

- include_tasks: restore.yml
  when: st_gitlab_restore.stat.exists == False
